{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/service/comments-service.service.ts","webpack:///./src/app/service/usersandposts-service.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"\\n<div style=\\\"text-align:center\\\">\\n  <h3> {{titleApp}} </h3>\\n</div>\\n<br>\\n\\n<div class=\\\"d-flex justify-content-center\\\" *ngIf=\\\"imgLoader\\\" > \\n  <strong>Loading...</strong>\\n  <div class=\\\"spinner-border\\\" role=\\\"status\\\"></div>\\n</div> \\n\\n<div style=\\\"text-align:left\\\" class=\\\"container\\\">\\n    <h5>\\n      {{title}}\\n    </h5>\\n\\n    <table  style= \\\"table-layout:auto\\\" class=\\\"table\\\">\\n      <tbody>\\n        <tr>\\n          <td *ngFor=\\\"let user of users\\\" (click)=\\\"onSelect(user)\\\"> \\n            <button class=\\\"btn btn-primary .btn-primary:hover\\n            .btn-primary:visited\\\">{{ user.name.split(\\\" \\\",2)[0]}}</button>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n</div>\\n\\n<br>\\n\\n   <!--Show posts on click of a user-->\\n<div class=\\\"container\\\" *ngIf=\\\"postsFlag\\\">\\n\\n    <!-- Show it when there is no posts from a user-->\\n    <div class=\\\"no-data text-center\\\" *ngIf=\\\"postsForUser.length == 0\\\">\\n      Posts from {{selectedUser}}:\\n      There is no posts added yet!\\n    </div>\\n\\n     <!-- Show it when there are posts for a user -->\\n    <div *ngIf=\\\"postsForUser.length !== 0\\\">\\n        Posts from {{selectedUser}}:\\n        <div class=\\\"accordion\\\" *ngFor=\\\"let post of postsForUser; let i=index\\\"  \\n        (click)=\\\"onSelectPost(post.postId)\\\">\\n            <section class=\\\"accordion-item\\\" *ngIf=\\\" i <= maxPostRows\\\">\\n                Title: {{post.title}}\\n                <br>\\n                Body:  {{post.body}}\\n                <div class=\\\"accordion-item-content\\\"  *ngFor=\\\"let comment of comments; let i=index\\\" >\\n                  <p>\\n                    Name: {{comment.name}}\\n                    <br>\\n                    Body: {{comment.body}}\\n                    <br>\\n                  </p>\\n                </div>\\n            </section>\\n       </div>\\n          \\n           <div class=\\\"text-right\\\">\\n                <button class=\\\"btn btn-primary\\\" (click)=\\\"onLoadAllClick()\\\">Load all</button>\\n           </div>\\n      \\n    </div>\\n\\n</div>   \\n\\n\"","import { Component } from '@angular/core';\nimport { UsersandpostsService } from './service/usersandposts-service.service';\nimport { User } from './model/user';\nimport { Post } from './model/post';\nimport { Comment} from './model/comment';\nimport { timeout } from 'q';\nimport { s } from '@angular/core/src/render3';\nimport { CommentsService } from './service/comments-service.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  titleApp:string;\n  title:string;\n  users: User[];\n  selectedUser: String;\n  postsForUser:Post[];\n  postsFlag: boolean;\n  maxPostRows: number;\n  imgLoader :boolean = true;\n  comments: Comment[];\n  selectedPost: number;\n  commentsFlag: boolean;\n\n  constructor(private usersandpostsService: UsersandpostsService, \n    private commentsService: CommentsService\n    ) {}\n\n  async ngOnInit() {\n    //this.imgLoader = true;\n    this.postsFlag = false;\n    this.commentsFlag =false;\n    this.postsForUser =[];\n    this.comments =[];\n    this.titleApp = \"Welcome to Blog UI Application\";\n    this.title= \"Please select a user to find their posts:\"\n    this.loadUsers();\n    this.imgLoader =false;\n  }\n\n   // Get user list\n   loadUsers() {\n    return this.usersandpostsService.findAll()\n    .subscribe(data =>{\n      this.users = data;\n      console.log(\"Response::\"+ this.users.length);\n    })\n  }\n\n  headinglbl:string;\n  collapselbl:string;\n\n  //Onclick on user \n  onSelect(user: User):  void{\n    this.selectedUser = user.name;\n    this.postsForUser = user.posts;\n    this.postsFlag = true;\n    this.maxPostRows = 2;\n  }\n\n  //OnLoad button click\n  onLoadAllClick(): void{\n    this.maxPostRows = this.postsForUser.length;\n\n  }\n\n  //Onclick on post \n  onSelectPost(postId:number):void{\n    this.selectedPost = postId;\n    this.commentsFlag = true;\n    this.commentsService.findCommentsForPost(postId)\n    .subscribe(data => {\n      this.comments = data;\n    });\n  }\n\n}\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { UsersandpostsListComponent } from './component/usersandposts-list/usersandposts-list.component';\nimport { UsersandpostsService } from './service/usersandposts-service.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommentsService } from './service/comments-service.service';\n\n\nconst routes: Routes = [\n\n  //{ path: 'usersandposts', component: UsersandpostsListComponent},\n    //{ path: 'fetchUsers', component: UsersandpostsListComponent},\n];\n \n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    RouterModule.forRoot(routes)\n  ],\n  exports: [RouterModule],\n  providers: [UsersandpostsService,\n              CommentsService],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Comment} from '../model/comment';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService {\n  private commentsUrl: string;\n  private httpHeader: HttpHeaders;\n  //private postId:number;\n\n  constructor(private http:HttpClient) {\n    this.commentsUrl=\"https://jsonplaceholder.typicode.com/comments?postId=\";\n   }\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }  \n\n  //Method returns an Observable intance that holds an array of Comment objects\n  public findCommentsForPost(postId:number): Observable<Comment[]> {\n      var data = this.http.get<Comment[]>(this.commentsUrl+postId, this.httpOptions).pipe(\n        retry(1),\n        catchError(this.handleError));\n        console.log(\"Backend response for comments:\" + data);\n    return data;\n\n  }\n\n  // Error handling \n  handleError(error) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(\"Error:\" + errorMessage);\n    return throwError(errorMessage);\n }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { User } from '../model/user';\nimport { Post } from '../model/post';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersandpostsService {\n\n  private usersAndPostsUrl: string;\n    \n  constructor(private http: HttpClient) {\n     this.usersAndPostsUrl = 'http://localhost:8080/api/usersandposts';\n   }\n\n   \n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }  \n\n   //Method returns an Observable intance that holds an array of User objects\n   public findAll(): Observable<User[]> {\n    return this.http.get<User[]>(this.usersAndPostsUrl, this.httpOptions).pipe( retry(1),\n     catchError(this.handleError));\n   }\n  \n  // Error handling \n  handleError(error) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(\"Error:\" + errorMessage);\n    return throwError(errorMessage);\n }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}